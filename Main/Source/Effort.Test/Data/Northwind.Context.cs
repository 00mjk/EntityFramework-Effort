#region License

// Copyright (c) 2011 Effort Team
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is 
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#endregion

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace Effort.Test.Data
{
    public class NorthwindEntities : ObjectContext, IDisposable
    {
        public const string ContainerName = "NorthwindEntities";
    
        #region Constructors
    
        public NorthwindEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public NorthwindEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<Categories> Categories
        {
            get { return _categories  ?? (_categories = CreateObjectSet<Categories>("Categories")); }
        }
        private ObjectSet<Categories> _categories;
    
        public ObjectSet<CustomerDemographics> CustomerDemographics
        {
            get { return _customerDemographics  ?? (_customerDemographics = CreateObjectSet<CustomerDemographics>("CustomerDemographics")); }
        }
        private ObjectSet<CustomerDemographics> _customerDemographics;
    
        public ObjectSet<Customers> Customers
        {
            get { return _customers  ?? (_customers = CreateObjectSet<Customers>("Customers")); }
        }
        private ObjectSet<Customers> _customers;
    
        public ObjectSet<Employees> Employees
        {
            get { return _employees  ?? (_employees = CreateObjectSet<Employees>("Employees")); }
        }
        private ObjectSet<Employees> _employees;
    
        public ObjectSet<Order_Details> Order_Details
        {
            get { return _order_Details  ?? (_order_Details = CreateObjectSet<Order_Details>("Order_Details")); }
        }
        private ObjectSet<Order_Details> _order_Details;
    
        public ObjectSet<Orders> Orders
        {
            get { return _orders  ?? (_orders = CreateObjectSet<Orders>("Orders")); }
        }
        private ObjectSet<Orders> _orders;
    
        public ObjectSet<Products> Products
        {
            get { return _products  ?? (_products = CreateObjectSet<Products>("Products")); }
        }
        private ObjectSet<Products> _products;
    
        public ObjectSet<Region> Region
        {
            get { return _region  ?? (_region = CreateObjectSet<Region>("Region")); }
        }
        private ObjectSet<Region> _region;
    
        public ObjectSet<Shippers> Shippers
        {
            get { return _shippers  ?? (_shippers = CreateObjectSet<Shippers>("Shippers")); }
        }
        private ObjectSet<Shippers> _shippers;
    
        public ObjectSet<Suppliers> Suppliers
        {
            get { return _suppliers  ?? (_suppliers = CreateObjectSet<Suppliers>("Suppliers")); }
        }
        private ObjectSet<Suppliers> _suppliers;
    
        public ObjectSet<Territories> Territories
        {
            get { return _territories  ?? (_territories = CreateObjectSet<Territories>("Territories")); }
        }
        private ObjectSet<Territories> _territories;

        #endregion
  
    }
}
